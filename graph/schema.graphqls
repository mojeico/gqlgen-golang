type AuthResponse{
    authToken: AuthToken!
    user: User!
}
type AuthToken{
    accesToken: String!
    expiredAt: Int!

}

input RegisterInput {
    username: String!
    email: String!
    password: String!
    confirmPassword: String!
    firstName: String!
    lastName: String!
}

input LoginInput{
    email: String!
    password: String!

}


type User {
    id: ID!
    username: String!
    email: String!
    firstName: String!
    lastName: String!
    updatedAt: Int!
    cratedAt: Int!
    deletedAt: Int!
}


input NewUser {
    username: String!
    email: String!
}



type Meetup {
    id: ID!
    name: String!
    description: String!
}

input NewMeetup{
    name:String!
    description:String!
}

input MeetupFilter{
    name: String
}



input UpdateMeetup {
    name: String
    description: String
}





type Mutation{
    register(input: RegisterInput!):AuthResponse!
    login(input: LoginInput!):AuthResponse!

    createMeetup(input: NewMeetup!): Meetup!
    updateMeetup(id: ID!, input: UpdateMeetup): Meetup!
    deleteMeetup(id:ID!): Boolean
    createUser(input: NewUser!): User!
}


type Query {
    getAllMeetups(filter: MeetupFilter, limit: Int = 10, offset: Int = 0):[Meetup!]!
    getMeetupById(id:ID!):Meetup!

    getAllUsers:[User!]!
    getUserById(id:ID!):User!
}